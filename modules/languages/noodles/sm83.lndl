#**********************************
#
#	 @file	sm83.lmodule
#	 @author	Thomas Gijsbers (@RaichuBender)
#	 @brief	 SM83 Assembly Language Module
#	 @version   0.1
#	 @date	2021／09／24
#
#	 @copyright  © Copyright 2021 — Thomas Gijsbers
#			 	 All rights reserved.
#
#		"GAME BOY" and "GAME BOY COLOR” are
#			trade narks or registered trade
#			mark of Nintendo of America Inc.
#			and／or Nintendo Co., Ltd.
#		Usage under FAIR USE.
#		All rights regarding usage of the
#			aforementioned trade marks belong
#			to their respective owners.
#
#**********************************


LANGUAGE(sm83_asm)
#: Game Boy SM83 (Z80) assembly language

	DisplayName: Game Boy SM83 (Z80) asm

	REGISTER_STORAGE(0x00)
	#: Regular
		Size:	12 BYTES

		# Registers:
		# A F
		REGISTER(AF)
		{
			Mapping:	0x00
			Size:		16 BITS
			Purpose: 	GENERAL
		},
		# Accumulator
		REGISTER(A)
		{
			Mapping:	0x00
			Size:		8 BITS 
			Purpose:	GENERAL
		},
		# Note: F is the flags register defined below

		# B C
		REGISTER(BC)
		{
			Mapping:	0x10
			Size:		16 BITS
			Purpose: 	GENERAL
		},
		REGISTER(B)
		{
			Mapping:	0x10
			Size:		8 BITS 
			Purpose:	GENERAL
		},
		REGISTER(C)
		{
			Mapping:	0x18
			Size:		8 BITS 
			Purpose:	GENERAL
		},

		# D E
		REGISTER(DE)
		{
			Mapping:	0x20
			Size:		16 BITS
			Purpose: 	GENERAL
		},
		REGISTER(D)
		{
			Mapping:	0x20
			Size:		8 BITS 
			Purpose:	GENERAL
		},
		REGISTER(E)
		{
			Mapping:	0x28
			Size:		8 BITS 
			Purpose:	GENERAL
		},

		# H L
		REGISTER(HL)
		{
			Mapping:	0x30
			Size:		16 BITS
			Purpose: 	GENERAL
		},
		REGISTER(H)
		{
			Mapping:	0x30
			Size:		8 BITS 
			Purpose:	GENERAL
		},
		REGISTER(L)
		{
			Mapping:	0x38
			Size:		8 BITS 
			Purpose:	GENERAL
		},


		# Program Counter
		REGISTER(PC)
		{
			Mapping:	0x40
			Size:		16 BITS
			Purpose: 	PROGRAM_COUNTER
		},

		# Stack Pointer
		REGISTER(SP)
		{
			Mapping:	0x50
			Size:		16 BITS
			Purpose: 	STACK_POINTER
		},

		# Flags (paired with A)
		REGISTER(F)
		{
			Mapping:	0x08
			Size:		8 BITS
			Purpose:	FLAGS
		},

		# Flags:
		# Zero
		FLAG(ZF)
		{
			Mapping: 	0x0f
		},

		# Negative (last operation was a subtraction
		FLAG(NF)
		{
			Mapping: 	0x0e
		},

		# Half-Carry (nybble)
		FLAG(HF)
		{
			Mapping: 	0x0d
		},

		# Carry (byte)
		FLAG(CF)
		{
			Mapping: 	0x0c
		}

	END_REGISTER_STORAGE

	INSTRUCTION_SET(REGULAR)
	#: All non-CB instructions

	## Misc
		"NOP":		NOTHING	0x00	1 4
		{
			"NO_OP;\n"
		}

		"STOP 0":	SPECIAL	0x10	2 4
		{
			"STOP(0);\n"
		}

		"HALT":		SPECIAL	0x76	1 4
		{
			"HALT;\n"
		}

		"<<CB>> _imm8_", IMM8:	SPECIAL	0xcb	2 8
		{
			"// <<CB>> _imm8_;\n"
		}

	## Loads
		# 8-bit Loads
MACRO:LOAD( _REG_, _OP_B_ )
=BEGIN
		"LD _REG_, %s": MOV_STOR	GROUP( _OP_B_, 8, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)", "A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	 *8(HL),   A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	8,	4	}

			{
				" _REG_ = %s;\n"
			}
		}
=END

		^%LOAD( B, 0x40 )
		^%LOAD( C, 0x48 )
		^%LOAD( D, 0x50 )
		^%LOAD( E, 0x58 )
		^%LOAD( H, 0x60 )
		^%LOAD( L, 0x68 )

		"LD (HL), %s": MOV_STOR	GROUP( 0x70, 6, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L	}
			INSTR_COUNT:	1
			CYCLES:			8

			{
				"(*HL) = %s;\n"
			}
		}

		"LD (HL), A": MOV_STOR	0x77	1 8
		{
			"(*HL) = A;\n"
		}

		^%LOAD( A, 0x78 )

		"LD %s, __imm8_", IMM8: MOV_STOR	GROUP( 0x06, 8, 8 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	2
			CYCLES:	{	 8,	8,	8,	8,	8,	8,	12,	8	}

			{
				"%s = _imm8_;\n"
			}
		}

		"LDH (0xff%02x), A", IMM8: MOV_STOR	0xe0	2 12
		{
			"*(0xff00|_imm8_) = A;\n"
		}
		"LDH A, (0xff%02x)", IMM8: MOV_STOR	0xf0	2 12
		{
			"A = *(0xff00|_imm8_);\n"
		}

		"LD %s, A":	MOV_STOR	GROUP( 0x02, 4, 16 )
		{
			REPR:	{	"(BC)",	"(DE)",	"(HL+)",	"(HL-)"   }
			PARAM:	{	*8(BC),	*8(DE),	*8(HL++),	*8(HL--)  }
			INSTR_COUNT:	1
			CYCLES:			8

			{
				"%s = A;\n"
			}
		}
		"LD A, %s":	MOV_STOR	GROUP( 0x0a, 4, 16 )
		{
			REPR:	{	"(BC)",	"(DE)",	"(HL+)",	"(HL-)"   }
			PARAM:	{	*8(BC),	*8(DE),	*8(HL++),	*8(HL++)  }
			INSTR_COUNT:	1
			CYCLES:			8

			{
				"A = %s;\n"
			}
		}

		"LD (C), A": MOV_STOR	0xe2	2 8
		{
			"*(0xff00|C) = A;\n"
		}
		"LD A, (C)": MOV_STOR	0xf2	2 8
		{
			"A = *(0xff00|C);\n"
		}

		"LD (addr16), A", IMM16: MOV_STOR	0xea	3 16
		{
			"(*_addr16_) = A;\n"
		}
		"LD A, (addr16)", IMM16: MOV_STOR	0xfa	3 16
		{
			"A = (*_addr16_);\n"
		}

		# 16-bit Loads
		"LD %s, _addr16", IMM16:	MOV_STOR	GROUP( 0x01, 4, 16 )
		{
			REPR:	{	"BC",	"DE",	"HL",	"SP"   }
			PARAM:	{	BC,	DE,	HL,	SP  }
			INSTR_COUNT:	3
			CYCLES:			12

			{
				"%s = _addr16_;\n"
			}
		}

		"LD (addr16), SP", IMM16:	MOV_STOR	0x08	3 20
		{
			"(*_addr16_) = SP;\n"
		}

		"POP %s":	MOV_STOR	GROUP( 0xc1, 4, 16 )
		{
			REPR:	{	"BC",	"DE",	"HL",	"AF"   }
			PARAM:	{	BC,	DE,	HL,	SP  }
			INSTR_COUNT:	1
			CYCLES:			12

			{
				"%1$s = STACK[SP++];\n"
			}
		}

		"PUSH %s":	MOV_STOR	GROUP( 0xc5, 4, 16 )
		{
			REPR:	{	"BC",	"DE",	"HL",	"AF"   }
			PARAM:	{	BC,	DE,	HL,	SP  }
			INSTR_COUNT:	1
			CYCLES:			16

			{
				"STACK[--SP] = %1$s;\n"
			}
		}

	## Arithmetic
		# 8-bit Arithmetic
		"INC %s": ARITHMETIC	GROUP( 0x04, 8, 8 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	12,	4	}

			{
				"--%1$s;\n"
				"ZF = CF = %1$s == -1;\n"
				"HF = ((u8)%1$s) == 0xf;\n"
				"NF = false;\n"
			}
		}

		"DEC %s": ARITHMETIC	GROUP( 0x05, 8, 8 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	12,	4	}

			{
				"++%1$s;\n"
				"ZF = %1$s == 1;\n"
				"CF = %1$s == 0;\n"
				"HF = ((u8)%1$s) == 0;\n"
				"NF = true;\n"
			}
		}


		"ADD A, %s": ARITHMETIC	GROUP( 0x80, 8, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	8,	4	}

			{
				"A += %1$s;\n"
				"ZF = A == (0 - %1$s);\n"
				"CF = (A + %1$s) < A;\n"
				"HF = (A + %1$s):4[0] < ((u8)A);\n"
				"NF = false;\n"
			}
		}

		"ADD A, _imm8_", IMM8: ARITHMETIC	0xc6	2 8
		{
			"A += 0x%1$02x;\n"
			"ZF = A == (0 - 0x%1$02x);\n"
			"CF = (A + 0x%1$02x) < A;\n"
			"HF = (A + 0x%1$02x):4[0] < ((u8)A);\n"
			"NF = false;\n"
		}


		"ADC A, %s": ARITHMETIC	GROUP( 0x88, 8, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	8,	4	}

			{
				"if (CF)\n"
				"	A += %1$s + 1;\n"
				"else\n"
				"	A += %1$s;\n"
				"ZF = A == (0 - %1$s);\n"
				"CF = (A + %1$s) < A;\n"
				"HF = (A + %1$s):4[0] < ((u8)A);\n"
				"NF = false;\n"
			}
		}

		"ADC A, _imm8_", IMM8: ARITHMETIC	0xce	2 8
		{
			"if (CF)\n"
			"	A += 0x%1$02x + 1;\n"
			"else\n"
			"	A += 0x%1$02x;\n"
			"ZF = A == (0 - 0x%1$02x);\n"
			"CF = (A + 0x%1$02x) < A;\n"
			"HF = ((u8)(A + 0x%1$02x)) < ((u8)A);\n"
			"NF = false;\n"
		}


		"SUB %s": ARITHMETIC	GROUP( 0x90, 8, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	8,	4	}

			{
				"A -= %1$s;\n"
				"ZF = A == %1$s;\n"
				"CF = A < %1$s;\n"
				"HF = ((u8)A) < ((u8)%1$s);\n"
				"NF = true;\n"
			}
		}

		"SUB A, _imm8_", IMM8: ARITHMETIC	0xd6	2 8
		{
			"A -= 0x%1$02x;\n"
			"ZF = A == 0x%1$02x;\n"
			"CF = A < 0x%1$02x;\n"
			"HF = ((u8)A) < ((u8)0x%1$02x);\n"
			"NF = true;\n"
		}


		"SBC A, %s": ARITHMETIC	GROUP( 0x98, 8, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	8,	4	}

			{
				"if (CF)\n"
				"	A -= (%1$s + 1);\n"
				"else\n"
				"	A -= %1$s;\n"
				"ZF = A == %1$s;\n"
				"CF = A < %1$s;\n"
				"HF = ((u8)A) < ((u8)%1$s);\n"
				"NF = true;\n"
			}
		}

		"SBC A, _imm8_", IMM8: ARITHMETIC	0xde	2 8
		{
			"if (CF)\n"
			"	A -= (0x%1$02x + 1);\n"
			"else\n"
			"	A -= 0x%1$02x;\n"
			"ZF = A == 0x%1$02x;\n"
			"CF = A < 0x%1$02x;\n"
			"HF = ((u8)A) < ((u8)0x%1$02x);\n"
			"NF = true;\n"
		}

		"AND %s": ARITHMETIC	GROUP( 0xa0, 8, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	8,	4	}

			{
				"A &= %1$s;\n"
				"ZF = (A & %1$s) == 0;\n"
				"CF = false;\n"
				"HF = true;\n"
				"NF = false;\n"
			}
		}

		"AND _imm8_", IMM8: ARITHMETIC	0xe6	2 8
		{
			"A &= 0x%1$02x;\n"
			"ZF = (A & 0x%1$02x) == 0;\n"
			"CF = false;\n"
			"HF = true;\n"
			"NF = false;\n"
		}


		"XOR %s": ARITHMETIC	GROUP( 0xa8, 8, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	8,	4	}

			{
				"A ^= %1$s;\n"
				"ZF = (A ^ %1$s) == 0;\n"
				"CF = false;\n"
				"HF = false;\n"
				"NF = false;\n"
			}
		}

		"XOR _imm8_", IMM8: ARITHMETIC	0xee	2 8
		{
			"A ^= 0x%1$02x;\n"
			"ZF = (A ^ 0x%1$02x) == 0;\n"
			"CF = false;\n"
			"HF = false;\n"
			"NF = false;\n"
		}


		"OR %s": ARITHMETIC	GROUP( 0xb0, 8, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	8,	4	}

			{
				"A |= %1$s;\n"
				"ZF = (A | %1$s) == 0;\n"
				"CF = false;\n"
				"HF = false;\n"
				"NF = false;\n"
			}
		}

		"OR _imm8_", IMM8: ARITHMETIC	0xf6	2 8
		{
		OPT REPR:
			"A |= 0x%1$02x;\n"
			"ZF = (A | 0x%1$02x) == 0;\n"
			"CF = false;\n"
			"HF = false;\n"
			"NF = false;\n"
		}


		"CP A, %s": ARITHMETIC	GROUP( 0xb8, 8, 1 )
		{
			REPR:	{	"B",	"C",	"D",	"E",	"H",	"L",	"(HL)",	"A"   }
			PARAM:	{	 B,	C,	D,	E,	H,	L,	*8(HL),	A	}
			INSTR_COUNT:	1
			CYCLES:	{	 4,	4,	4,	4,	4,	4,	8,	4	}

			{
				"ZF = A == %1$s;\n"
				"CF = A < %1$s;\n"
				"HF = ((u8)A) < ((u8)%1$s);\n"
				"NF = true;\n"
			}
		}

		"CP _imm8_", IMM8: ARITHMETIC	0xfe	2 8
		{
			"ZF = A == 0x%1$02x;\n"
			"CF = A < 0x%1$02x;\n"
			"HF = ((u8)A) < ((u8)0x%1$02x);\n"
			"NF = true;\n"
		}

		# TODO These require additional logic
		"DAA": ARITHMETIC	0x27	1 4
		{
			"DAA;\n"
		}
		"CPL": ARITHMETIC	0x2f	1 4
		{
			"CPL;\n"
		}
		"SCF": ARITHMETIC	0x37	1 4
		{
			"SCF;\n"
		}
		"CCF": ARITHMETIC	0x3f	1 4
		{
			"CCF;\n"
		}

		# 16-bit Arithmetic
		"INC %s": ARITHMETIC	GROUP( 0x03, 4, 16 )
		{
			REPR:	{	"BC",	"DE",	"HL",	"SP"	}
			PARAM:	{	HL,	DE,	HL,	SP	}
			INSTR_COUNT:	1
			CYCLES:			8

			{
				"++%s;\n"
			}
		}
		"DEC %s": ARITHMETIC	GROUP( 0x0b, 4, 16 )
		{
			REPR:	{	"BC",	"DE",	"HL",	"SP"	}
			PARAM:	{	BC,	DE,	HL,	SP	}
			INSTR_COUNT:	1
			CYCLES:			8

			{
				"--%s;\n"
			}
		}

		"ADD HL, %s": ARITHMETIC	GROUP( 0x09, 4, 16 )
		{
			REPR:	{	"BC",	"DE",	"HL",	"SP"	}
			PARAM:	{	HL,	DE,	HL,	SP	}
			INSTR_COUNT:	1
			CYCLES:			8

			{
				"HL += %1$s;\n"
				"CF = (HL + %1$s) < HL;\n"
				"HF = ((u8)(HL + %1$s)) < ((u8)HL);\n"
				"NF = false;\n"
			}
		}

	## Bit manipulation
		# Rotate A
		"R%s":	BIT_MANIP	GROUP( 0x07, 4, 8 )
		{
			REPR:	{	"LCA",	"RCA",	"LA",	"RA"	}
			PARAM:	0
			INSTR_COUNT:	1
			CYCLES:	4

			{
				"R%s;\n"
			}
		}

	##	Branching
		# Unconditional jumps
		"JP addr16", IMM16: JUMP	0xc3	3 16
		{
			"goto lbl_%04x;\n"
		}

		"JR addr16", IMM8_R: JUMP	0x18	2 12
		{
			"goto lbl_%04x;\n"
		}

		# Conditional jumps
		"JP %s, _addr16", IMM16: COND_JUMP	GROUP(  0xc2, 4, 8  )
		{
			REPR:	{    "NZ",	"Z",	"NC",	"C"    }
			PARAM:	{	ZF==0,	ZF==1,	CF==0,	CF==1	}
			INSTR_COUNT:	3
			CYCLES:	12

			{
				"if (%s)\n"
				"	goto lbl_%%04x;\n"
			}
		}

		"JR %s, _addr16", IMM8_R: COND_JUMP	GROUP(  0x20, 4, 8  )
		{
			REPR:	{    "NZ",	"Z",	"NC",	"C"    }
			PARAM:	{	ZF==0,	ZF==1,	CF==0,	CF==1	}
			INSTR_COUNT:	3
			CYCLES:	12

			{
				"if (%s)\n"
				"	goto lbl_%%04x;\n"
		}

		# Reset vector jumps
		"RST %s": JUMP	GROUP(  0xc7, 8, 8  )
		{
			REPR:	{    "0x0000",	"0x0008",	"0x0010",	"0x0018",	"0x0020",	"0x0028",	"0x0030",	"0x0038"    }
			PARAM:	{	0,	8,	0x10,	0x18,	0x20,	0x28,	0x30,	0x38	}
			INSTR_COUNT:	1
			CYCLES:	16

			{
				"RST%s();\n"
				"return;\n"
			}
		}

		# Unconditional calls
		"CALL addr16", IMM16: CALL	0xcd	3 24
		{
			"fn_%04x();\n"
		}

		# Conditional calls
		"CALL %s, _addr16", IMM16: COND_CALL	GROUP(  0xc4, 4, 8  )
		{
			REPR:	{    "NZ",	"Z",	"NC",	"C"    }
			PARAM:	0
			INSTR_COUNT:	3
			CYCLES:	12

			{
				"if (%s)\n"
				"	fn_%%04x();\n"
			}
		}

		# Unconditional returns
		"RET": RETURN	0xc9	1 16
		{
			"return;\n"
		}

		"RETI": RETURN	0xd9	1 16
		{
			"IE;\n"
			"return;\n"
		}

		# Conditional returns
		"RET %s": COND_RETURN	GROUP(  0xc0, 4, 8  )
		{
			REPR:	{	"NZ",	"Z",	"NC",	"C"	}
			PARAM:	0
			INSTR_COUNT:	1
			CYCLES:	12

			{
				"if (%s)\n"
				"	return;\n"
			}
		}

	END_INSTRUCTION_SET
	# ...

	INSTRUCTION_SET(CB)
	#: ...
	END_INSTRUCTION_SET

END_LANGUAGE
